(define (accumulate combiner start n term)
  (define (f combiner n term current)
  	(if (<= n 1) 
      (term current)
      (combiner (term current) (f combiner (- n 1) term (+ current 1)))
  	)
  )
  (combiner start (f combiner n term 1))
)

(define (accumulate-tail combiner start n term)
  (define (f combiner n term current x)
    (if (<= n 1) 
      (combiner (term current) x)
      (f combiner (- n 1) term (+ current 1) (combiner (term current) x))
    )
  )
  (f combiner n term 1 start)
)

(define (partial-sums stream)
  (define (helper total stream)
      (if (null? stream)
      	  nil
          (cons-stream (+ (car stream) total) (helper (+ (car stream) total) (cdr-stream stream)))
      )
  )
  (helper 0 stream)
)

(define (rle s)
  (define (f stream n number)
    (cond ((null? stream) (cons-stream (list number n) nil)) 
        ((= (car stream) number) (f (cdr-stream stream) (+ n 1) number))       
        (else (cons-stream (list number n) (f stream 0 (car stream))))
    )
  )
  (if (null? s) nil
    (f s 0 (car s)))
)